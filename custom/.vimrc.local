set nocursorline " don't highlight current line

" keyboard shortcuts
inoremap jj <ESC>

" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'iTerm.app')
    colorscheme solarized
  else
    colorscheme desert
  endif
endif

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

" custom
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
if exists('$TMUX')
  set clipboard=
else
  set clipboard=unnamed
endif

set fileencodings=utf-8,gbk

if(has("win32") || has("win64") || has("win95") || has("win16"))
    set guifont=Bitstream\ Vera\ Sans\ Mono:h14 " :cANSI
else
    set guifont=Menlo:h14
endif
set guioptions-=m
set guioptions-=T

colorscheme solarized
set background=light

set nobomb
set nowrap

set foldmethod=indent
set foldlevel=99
set cc=120

set completeopt=longest,menu ",preview
" let g:SuperTabDefaultCompletionType = '<c-x><c-u>'
"
" let g:acp_enableAtStartUp = 0
" let g:neocomplcache_enable_at_startup = 1
" let g:neocomplcache_enable_smart_case = 1
" let g:neocomplcache_min_syntax_length = 3
" let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" let g:neocomplcache_disable_auto_complete = 0

let g:gitgutter_highlight_lines = 1

let g:syntastic_javascript_checkers = ["jshint"]
let g:JSHintUpdateWriteOnly = 1
let g:JSHintHighlightErrorLine = 0
" let g:jshint_highlight_color = "Red"

" nmap <leader>ff :!js-beautify -f % -r<CR>
autocmd FileType javascript noremap <buffer> <c-f> :call JsBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call CSSBeautify()<cr>

let g:go_play_open_browser = 1
let g:go_fmt_fail_silently = 0
let g:go_fmt_command = "goimports"
let g:go_fmt_autosave = 1

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" nmap <leader>gg :!gofmt -w %<CR>
" autocmd FileType go autocmd BufWritePre <buffer> :Fmt
" autocmd FileType go autocmd BufWritePre <buffer> :keepjumps retab
" nmap <leader>pp :!autopep8 -i %<CR>
nmap <leader>cc :cd %:h<CR>
nmap <leader>hh :% ! php_beautifier -a --filters "Default() ArrayNested()"<CR>
nmap <leader>pp :call FormartSrc()<CR>
"定义FormartSrc()
if !exists("*FormartSrc")
    func FormartSrc()
        exec "w"
        if &filetype == 'c'
            exec "!astyle --style=ansi --one-line=keep-statements -a --suffix=none %"
        elseif &filetype == 'cpp' || &filetype == 'hpp'
            exec "r !astyle --style=kr --suffix=none %"
        elseif &filetype == 'perl'
            exec "!astyle --style=gnu --suffix=none %"
        elseif &filetype == 'py'||&filetype == 'python'
            exec "r !autopep8 -i --aggressive %"
        elseif &filetype == 'java'
            exec "!astyle --style=java --suffix=none %"
        elseif &filetype == 'jsp'
            exec "!astyle --style=gnu --suffix=none %"
        elseif &filetype == 'xml'
            exec "!astyle --style=gnu --suffix=none %"
        endif
        exec "e!  %"
    endfunc
endif

" cscope
if has("cscope")
    set csprg=/usr/local/bin/cscope
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb

    nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

    " Using 'CTRL-spacebar' then a search type makes the vim window
    " split horizontally, with search result displayed in
    " the new window.

    nmap <C-Space>s :scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-Space>g :scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-Space>c :scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-Space>t :scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-Space>e :scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-Space>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-Space>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-Space>d :scs find d <C-R>=expand("<cword>")<CR><CR>

    " Hitting CTRL-space *twice* before the search type does a vertical
    " split instead of a horizontal one

    nmap <C-Space><C-Space>s
                \:vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-Space><C-Space>g
                \:vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-Space><C-Space>c
                \:vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-Space><C-Space>t
                \:vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-Space><C-Space>e
                \:vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-Space><C-Space>i
                \:vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-Space><C-Space>d
                \:vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif

" Vim plugins for Go
" if !exists('g:neocomplcache_omni_patterns')
"     let g:neocomplcache_omni_patterns = {}
" endif
" let g:neocomplcache_omni_patterns.go = '\h\w*\.'
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_global_ycm_extra_conf = '~/.ycc_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }
" filetype off
" filetype plugin indent off
" set rtp+=$GOROOT/misc/vim
" filetype plugin indent on
" syntax on

" Vim plugins for lua
let g:lua_compiler_name = '/usr/local/bin/luac5.1'
let g:lua_define_completefunc = 0

" for windows
if(has("win32") || has("win64") || has("win95") || has("win16"))
    language messages zh_CN.utf-8
    set directory=.,%TEMP%
endif
